package no.difi.vefa.validation;

import java.util.ArrayList;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import no.difi.vefa.configuration.Configuration;
import no.difi.vefa.message.Hint;
import no.difi.vefa.message.Message;
import no.difi.vefa.message.MessageType;
import no.difi.vefa.message.ValidationType;
import no.difi.vefa.properties.PropertiesFile;
import no.difi.vefa.ws.logging.StatLogger;
import no.difi.vefa.xml.Utils;

/**
 * This class is used to validate a xml document according to the
 * given configuration.
 */
public class Validate {
	/**
	 * Schema to validate XML against.
	 */
	public String schema;
	
	/**
	 * Version to validate XML against.
	 */
	public String version;
	
	/**
	 * XML to validate.
	 */
	public String xml;

	/**
	 * Path to properties file.
	 */	
	public String pathToPropertiesFile = "/etc/opt/VEFAvalidator/validator.properties";

	/**
	 * Should the current validation suppress warnings from output? Default false.
	 */	
	public boolean suppressWarnings = false;
	
	/**
	 * Collection of messages generated by the validation.
	 */
	public List<Message> messages = new ArrayList<Message>();

	/**
	 * Is the current XML valid?.
	 */		
	public boolean valid;
	
	/**
	 * Properties file as PropertiesFile object.
	 */	
	private PropertiesFile propertiesFile;
			
	
	/**
	 * Executes a validation according to the given configuration
	 * and adds messages to the message collection.
	 * 
	 * @throws Exception 
	 */
	public void main() throws Exception {
		// Set Saxon as XML parser
		System.setProperty("javax.xml.transform.TransformerFactory","net.sf.saxon.TransformerFactoryImpl");		
		
		// Load properties file
		PropertiesFile propFile = new PropertiesFile();
		propFile.main(this.pathToPropertiesFile);
		this.propertiesFile = propFile;		
		
		// Always hide warnings?
		if (this.propertiesFile.suppressWarnings == true) {
			this.suppressWarnings = true;
		}		
		
		// Check if XML string is well formed
		WellFormed wellFormed = new WellFormed();
		if (wellFormed.main(this.xml, messages) == false) {
			return;
		}
				
		// Load XML string as XML DOM
		Utils utils = new Utils();
		Document xmlDoc = utils.stringToXMLDOM(this.xml);				
		
		// Load configuration
		Configuration configuration = new Configuration();
		
		// Perform standard validation
		Document standardConfigDoc = configuration.fileToXMLDOM(this.propertiesFile.dataDir + "/STANDARD/config.xml", this.propertiesFile);
		NodeList standardValidates = utils.xmlDOMXPathQuery(standardConfigDoc, "/config/validate[@id='" + this.schema + "' and @version='" + this.version + "']");		
		this.validation(standardValidates, xmlDoc);				
		
		// Perform custom validation
		Document customConfigDoc = configuration.fileToXMLDOM(this.propertiesFile.dataDir + "/CUSTOM/config.xml", this.propertiesFile);
		NodeList customValidates = utils.xmlDOMXPathQuery(customConfigDoc, "/config/validate[@id='" + this.schema + "' and @version='" + this.version + "']");		
		this.validation(customValidates, xmlDoc);
				
		// We have not found anything in configuration to validate against
		if (standardValidates.getLength() == 0 && customValidates.getLength() == 0) {
			Message message = new Message();
			message.validationType = ValidationType.Configuration;
			message.messageType = MessageType.Fatal;
			message.title = "No validation definition is found in configuration.";
			message.description = "No entry is found in configuration for version '" + this.version+ "' and identificator '" + this.schema + "', unable to perform validation!";			
			this.messages.add(message);
		}
		
		// Set valid attribute
		this.setIsValid();
		
		// Log statistics
		if (this.propertiesFile.logStatistics == true) {
			// Set path where to place log files
			System.setProperty("statLoggerFilePath", this.propertiesFile.dataDir + "/LOG");
			
			// Perform logging
			StatLogger statLogger = new StatLogger();
			statLogger.logStats(this.schema, this.version, this.valid, this.messages);
		}		
	}
	
	/**
	 * Perform Difi validation of XML based on Difi configuration.
	 * 
	 * @param validates Nodelist of validation definitions
	 * @param xmlDoc XML as Document
	 * @throws Exception
	 */
	private void validation(NodeList validates, Document xmlDoc) throws Exception {		
		// Loop NodeList for validation steps
		for(int i=0; i<validates.getLength(); i++){
			Element validate = (Element) validates.item(i);
			NodeList steps = validate.getElementsByTagName("step");
			
			for(int x=0; x<steps.getLength(); x++){
				Node step = steps.item(x);			
				String id = step.getAttributes().getNamedItem("id").getNodeValue();
				String file = step.getAttributes().getNamedItem("file").getNodeValue();				
				
				System.out.println(id + " " + file);
				
				if (id.equals("XSD")) {					
					// Perform XSD validation
					XSDValidation xsdValidation = new XSDValidation();		
					xsdValidation.main(xmlDoc, this.propertiesFile.dataDir + file, this.messages, this.propertiesFile);					
				} else if (id.equals("XSL")) {
					// Perform XSL transformation
					SchematronTransformation xmlXslTransformation = new SchematronTransformation();
					xmlXslTransformation.main(xmlDoc, this.propertiesFile.dataDir + file, this.messages);
				} else if (id.equals("FILTER")) {
					String rule = step.getAttributes().getNamedItem("rule").getNodeValue();
					
					FilterMessage filterMessage = new FilterMessage();
					filterMessage.main(xmlDoc, this.propertiesFile.dataDir + file, this.messages, rule);
				}			
			}										
		}
	}
	
	/**
	 * Returns the validation message collection as XML.
	 * 
	 * @return String Messages as XML
	 * @throws Exception 
	 */
	public String messagesAsXML() throws Exception {		
		// Build XML document
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		
		Document doc = docBuilder.newDocument();
		Element rootElement = doc.createElement("messages");
		doc.appendChild(rootElement);
		
		// Iterate messages
		for (Message message : this.messages) {
			if (this.suppressWarnings == true && message.messageType == MessageType.Warning) {
			} else {
				// Create message
				Element msg = doc.createElement("message");
				rootElement.appendChild(msg);
				
				// Add message attribute schema
				msg.setAttribute("schema", schema);

				// Add message attribute version
				msg.setAttribute("version", version);

				// Add message attribute version
				msg.setAttribute("validationType", message.validationType.toString());
				
				// Add messagetype
				Element messageType = doc.createElement("messageType");
				messageType.appendChild(doc.createTextNode(message.messageType.toString()));
				msg.appendChild(messageType);
				
				// Add title
				Element title = doc.createElement("title");
				title.appendChild(doc.createTextNode(message.title));
				msg.appendChild(title);
				
				// Add description
				Element desc = doc.createElement("description");
				desc.appendChild(doc.createTextNode(message.description));
				msg.appendChild(desc);
				
				// Add schematron rule id
				Element schematronRuleId = doc.createElement("schematronRuleId");
				schematronRuleId.appendChild(doc.createTextNode(message.schematronRuleId));
				msg.appendChild(schematronRuleId);
				
				// Add hints to message
				if (message.hints != null) {
					// Create hints
					Element hints = doc.createElement("hints");
					
					for (Hint h : message.hints) {
						// Create hint
						Element hint = doc.createElement("hint");
						
						// Add title
						Element hintTitle = doc.createElement("title");
						hintTitle.appendChild(doc.createTextNode(h.title));
						hint.appendChild(hintTitle);					
						
						// Add description
						Element hintDesc = doc.createElement("description");
						hintDesc.appendChild(doc.createTextNode(h.description));
						hint.appendChild(hintDesc);
						
						// Add hint
						hints.appendChild(hint);
					}
					
					// Add hints
					msg.appendChild(hints);
				}				
			}
		}
		
		// Get XML utils and return DOM as string
		Utils utils = new Utils();				
		return utils.xmlDOMToString(doc);
	}
	
	/**
	 * Sets attribute valid. That is if the current XML is valid.
	 * Does this by looping the message collection and checking for
	 * messages with fatal message type.
	 * 
	 * @throws Exception
	 */	
	private void setIsValid() throws Exception {
		this.valid = true;
		
		for (Message message : this.messages) {
			if (message.messageType == MessageType.Fatal) {
				this.valid = false;
				return;
			}
		}
	}	
}
